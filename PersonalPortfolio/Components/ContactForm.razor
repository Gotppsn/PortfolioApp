@inject IJSRuntime JSRuntime

<div class="bg-white shadow-lg rounded-lg p-8">
    <EditForm Model="@contactForm" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        
        <div class="mb-4">
            <label for="name" class="block text-gray-700 font-bold mb-2">Name</label>
            <InputText id="name" @bind-Value="contactForm.Name" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600" />
            <ValidationMessage For="@(() => contactForm.Name)" class="text-red-600 text-sm" />
        </div>
        
        <div class="mb-4">
            <label for="email" class="block text-gray-700 font-bold mb-2">Email</label>
            <InputText id="email" @bind-Value="contactForm.Email" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600" />
            <ValidationMessage For="@(() => contactForm.Email)" class="text-red-600 text-sm" />
        </div>
        
        <div class="mb-4">
            <label for="subject" class="block text-gray-700 font-bold mb-2">Subject</label>
            <InputText id="subject" @bind-Value="contactForm.Subject" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600" />
            <ValidationMessage For="@(() => contactForm.Subject)" class="text-red-600 text-sm" />
        </div>
        
        <div class="mb-6">
            <label for="message" class="block text-gray-700 font-bold mb-2">Message</label>
            <InputTextArea id="message" @bind-Value="contactForm.Message" rows="5"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600" />
            <ValidationMessage For="@(() => contactForm.Message)" class="text-red-600 text-sm" />
        </div>
        
        <button type="submit" class="w-full bg-blue-600 hover:bg-blue-500 text-white font-bold py-3 px-4 rounded">
            @if (isSending)
            {
                <span>Sending...</span>
            }
            else
            {
                <span>Send Message</span>
            }
        </button>
    </EditForm>
    
    @if (isSubmitted)
    {
        <div class="mt-4 p-4 bg-green-100 text-green-700 rounded-md">
            Thank you for your message! I'll get back to you as soon as possible.
        </div>
    }
</div>

@code {
    private ContactFormModel contactForm = new();
    private bool isSubmitted = false;
    private bool isSending = false;
    
    [Parameter]
    public EventCallback<ContactFormModel> OnFormSubmit { get; set; }
    
    private async Task HandleValidSubmit()
    {
        isSending = true;
        
        try {
            // Here you would normally send this data to a backend service
            await Task.Delay(1000); // Simulate network request
            
            await OnFormSubmit.InvokeAsync(contactForm);
            isSubmitted = true;
            contactForm = new ContactFormModel();
        }
        finally {
            isSending = false;
        }
    }
    
    public class ContactFormModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Subject is required")]
        public string Subject { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Message is required")]
        [MinLength(10, ErrorMessage = "Message must be at least 10 characters")]
        public string Message { get; set; } = string.Empty;
    }
}