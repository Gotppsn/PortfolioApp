@inject IJSRuntime JSRuntime

<div class="bg-white dark:bg-gray-800 shadow-xl rounded-xl overflow-hidden">
    <div class="h-12 bg-gradient-to-r from-blue-600 to-purple-600 flex items-center px-6">
        <h2 class="text-white font-bold">Send a Message</h2>
    </div>
    <div class="p-8">
        <EditForm Model="@contactForm" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            
            <div class="mb-6">
                <label for="name" class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Name</label>
                <div class="relative">
                    <span class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-500 dark:text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                    </span>
                    <InputText id="name" @bind-Value="contactForm.Name" 
                             class="w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" />
                </div>
                <ValidationMessage For="@(() => contactForm.Name)" class="text-red-600 dark:text-red-400 text-sm mt-1" />
            </div>
            
            <div class="mb-6">
                <label for="email" class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Email</label>
                <div class="relative">
                    <span class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-500 dark:text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                        </svg>
                    </span>
                    <InputText id="email" @bind-Value="contactForm.Email" 
                             class="w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" />
                </div>
                <ValidationMessage For="@(() => contactForm.Email)" class="text-red-600 dark:text-red-400 text-sm mt-1" />
            </div>
            
            <div class="mb-6">
                <label for="subject" class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Subject</label>
                <div class="relative">
                    <span class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-500 dark:text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                        </svg>
                    </span>
                    <InputText id="subject" @bind-Value="contactForm.Subject" 
                             class="w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" />
                </div>
                <ValidationMessage For="@(() => contactForm.Subject)" class="text-red-600 dark:text-red-400 text-sm mt-1" />
            </div>
            
            <div class="mb-6">
                <label for="message" class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Message</label>
                <div class="relative">
                    <InputTextArea id="message" @bind-Value="contactForm.Message" rows="5"
                                 class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" />
                </div>
                <ValidationMessage For="@(() => contactForm.Message)" class="text-red-600 dark:text-red-400 text-sm mt-1" />
            </div>
            
            <button type="submit" class="w-full relative overflow-hidden bg-gradient-to-r from-blue-600 to-purple-600 text-white font-bold py-3 px-4 rounded-lg transform hover:-translate-y-1 hover:shadow-xl transition-all duration-300">
                <span class="relative z-10 flex items-center justify-center">
                    @if (isSending)
                    {
                        <svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>Sending Message...</span>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                        </svg>
                        <span>Send Message</span>
                    }
                </span>
            </button>
        </EditForm>
        
        @if (isSubmitted)
        {
            <div class="mt-6 p-4 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded-lg animate-fadeIn">
                <div class="flex items-center">
                    <svg class="h-6 w-6 mr-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                    <p class="font-medium">Thank you for your message! I'll get back to you as soon as possible.</p>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private ContactFormModel contactForm = new();
    private bool isSubmitted = false;
    private bool isSending = false;
    
    [Parameter]
    public EventCallback<ContactFormModel> OnFormSubmit { get; set; }
    
    private async Task HandleValidSubmit()
    {
        isSending = true;
        
        try {
            // Here you would normally send this data to a backend service
            await Task.Delay(1000); // Simulate network request
            
            await OnFormSubmit.InvokeAsync(contactForm);
            isSubmitted = true;
            contactForm = new ContactFormModel();
        }
        finally {
            isSending = false;
        }
    }
    
    public class ContactFormModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Subject is required")]
        public string Subject { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Message is required")]
        [MinLength(10, ErrorMessage = "Message must be at least 10 characters")]
        public string Message { get; set; } = string.Empty;
    }
}