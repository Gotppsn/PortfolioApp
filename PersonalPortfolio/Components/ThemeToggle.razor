@inject IJSRuntime JSRuntime

<button @onclick="ToggleTheme" class="flex items-center justify-center h-10 w-10 rounded-full hover:bg-gray-100 focus:outline-none">
    @if (isDarkMode)
    {
        <span class="text-yellow-500">‚òÄÔ∏è</span>
    }
    else
    {
        <span class="text-gray-700">üåô</span>
    }
</button>

@code {
    private bool isDarkMode;

    protected override async Task OnInitializedAsync()
    {
        isDarkMode = await GetPreferredTheme();
        await ApplyTheme(isDarkMode);
    }

    private async Task ToggleTheme()
    {
        isDarkMode = !isDarkMode;
        await ApplyTheme(isDarkMode);
        await SavePreferredTheme(isDarkMode);
    }

    private async Task<bool> GetPreferredTheme()
    {
        try
        {
            var theme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "theme");
            return theme == "dark";
        }
        catch
        {
            return false;
        }
    }

    private async Task SavePreferredTheme(bool isDark)
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "theme", isDark ? "dark" : "light");
    }

    private async Task ApplyTheme(bool isDark)
    {
        if (isDark)
        {
            await JSRuntime.InvokeVoidAsync("document.documentElement.classList.add", "dark");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("document.documentElement.classList.remove", "dark");
        }
    }
}