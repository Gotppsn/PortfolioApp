@inject IJSRuntime JSRuntime

<div class="relative">
    <button @onclick="ToggleTheme" 
            aria-label="Toggle dark/light mode" 
            class="flex items-center p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
        @if (isDarkMode)
        {
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 dark:text-yellow-300" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
            </svg>
        }
        else
        {
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 dark:text-gray-300" viewBox="0 0 20 20" fill="currentColor">
                <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
            </svg>
        }
    </button>

    <div class="absolute -top-10 right-0 transform translate-y-2 opacity-0 transition-all duration-300 z-50 pointer-events-none bg-white dark:bg-gray-800 shadow-lg rounded-lg p-2 text-xs text-gray-700 dark:text-gray-300 w-32 text-center">
        Switch to @(isDarkMode ? "light" : "dark") mode
    </div>
</div>

@code {
    private bool isDarkMode;

    protected override async Task OnInitializedAsync()
    {
        isDarkMode = await GetPreferredTheme();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ApplyTheme(isDarkMode);
        }
    }

    private async Task ToggleTheme()
    {
        isDarkMode = !isDarkMode;
        await ApplyTheme(isDarkMode);
        await SavePreferredTheme(isDarkMode);
    }

    private async Task<bool> GetPreferredTheme()
    {
        try
        {
            var theme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "theme");
            if (string.IsNullOrEmpty(theme))
            {
                // Check if user prefers dark mode at OS level
                return await JSRuntime.InvokeAsync<bool>("window.matchMedia('(prefers-color-scheme: dark)').matches");
            }
            return theme == "dark";
        }
        catch
        {
            return false;
        }
    }

    private async Task SavePreferredTheme(bool isDark)
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "theme", isDark ? "dark" : "light");
    }

    private async Task ApplyTheme(bool isDark)
    {
        if (isDark)
        {
            await JSRuntime.InvokeVoidAsync("document.documentElement.classList.add", "dark");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("document.documentElement.classList.remove", "dark");
        }
    }
}