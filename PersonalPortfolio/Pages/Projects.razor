@page "/projects"
@page "/projects/{Id:int}"
@inject ProjectService ProjectService
@inject NavigationManager NavigationManager

<PageTitle>Projects - Developer Portfolio</PageTitle>

<div class="container mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold mb-8 text-gray-800 dark:text-white">My Projects</h1>

    @if (Id.HasValue)
    {
        <ProjectDetail ProjectId="@Id.Value" OnBackToList="BackToList" />
    }
    else
    {
        <div class="mb-8 bg-white dark:bg-gray-800 rounded-xl shadow-lg transition-all duration-300">
            <div class="p-6">
                <div class="flex flex-col md:flex-row gap-4">
                    <div class="flex-grow relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                        </div>
                        <input type="text" @bind-value="searchTerm" @bind-value:event="oninput" @onkeyup="FilterProjects" 
                               placeholder="Search projects..." 
                               class="pl-10 w-full h-12 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-700 
                                     text-gray-800 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent
                                     transition-all duration-300" />
                    </div>
                    <div class="flex gap-3">
                        <div class="min-w-[180px]">
                            <select @bind="selectedTechnology" @bind:after="FilterProjects" 
                                    class="w-full h-12 border border-gray-200 dark:border-gray-700 rounded-lg 
                                          bg-white dark:bg-gray-700 text-gray-800 dark:text-white 
                                          focus:ring-2 focus:ring-blue-500 focus:border-transparent px-3
                                          transition-all duration-300 appearance-none">
                                <option value="">All Technologies</option>
                                @foreach (var tech in allTechnologies)
                                {
                                    <option value="@tech">@tech</option>
                                }
                            </select>
                            <div class="relative pointer-events-none">
                                <div class="absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 dark:text-gray-300">
                                    <svg class="w-4 h-4 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                        <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                        <div class="min-w-[150px]">
                            <select @bind="sortOption" @bind:after="FilterProjects" 
                                    class="w-full h-12 border border-gray-200 dark:border-gray-700 rounded-lg 
                                          bg-white dark:bg-gray-700 text-gray-800 dark:text-white 
                                          focus:ring-2 focus:ring-blue-500 focus:border-transparent px-3
                                          transition-all duration-300">
                                <option value="newest">Newest First</option>
                                <option value="oldest">Oldest First</option>
                                <option value="alphabetical">Alphabetical</option>
                            </select>
                            <div class="relative pointer-events-none">
                                <div class="absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 dark:text-gray-300">
                                    <svg class="w-4 h-4 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                        <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Project Cards Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            @foreach (var project in filteredProjects)
            {
                <div class="project-card animate-fadeIn" style="animation-delay: @($"{projects.IndexOf(project) * 100}ms")">
                    <ProjectCard Project="@project" />
                </div>
            }
        </div>

        @if (!filteredProjects.Any())
        {
            <div class="flex flex-col items-center justify-center py-12 px-6 bg-white dark:bg-gray-800 rounded-xl shadow-md transition-all duration-300">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <p class="text-gray-600 dark:text-gray-300 text-lg mb-4">No projects found matching your criteria.</p>
                <button @onclick="ClearFilters" 
                        class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors
                              transform hover:-translate-y-1 duration-300 shadow-md hover:shadow-lg">
                    <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                        </svg>
                        Clear Filters
                    </div>
                </button>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private List<Project> projects = new();
    private List<Project> filteredProjects = new();
    private List<string> allTechnologies = new();
    
    private string searchTerm = "";
    private string selectedTechnology = "";
    private string sortOption = "newest";

    protected override void OnInitialized()
    {
        projects = ProjectService.GetAllProjects();
        filteredProjects = projects;
        
        // Extract all unique technologies from projects
        allTechnologies = projects
            .SelectMany(p => p.Technologies)
            .Distinct()
            .OrderBy(t => t)
            .ToList();

        FilterProjects();
    }

    private void FilterProjects()
    {
        filteredProjects = projects;

        // Filter by search term
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredProjects = filteredProjects
                .Where(p => p.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || 
                           p.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Filter by technology
        if (!string.IsNullOrWhiteSpace(selectedTechnology))
        {
            filteredProjects = filteredProjects
                .Where(p => p.Technologies.Contains(selectedTechnology))
                .ToList();
        }

        // Sort results
        filteredProjects = sortOption switch
        {
            "newest" => filteredProjects.OrderByDescending(p => p.DateCompleted).ToList(),
            "oldest" => filteredProjects.OrderBy(p => p.DateCompleted).ToList(),
            "alphabetical" => filteredProjects.OrderBy(p => p.Title).ToList(),
            _ => filteredProjects
        };
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedTechnology = "";
        sortOption = "newest";
        FilterProjects();
    }
    
    private void BackToList()
    {
        NavigationManager.NavigateTo("/projects");
    }
}