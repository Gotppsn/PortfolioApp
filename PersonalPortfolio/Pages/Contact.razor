@page "/contact"
@inject IJSRuntime JSRuntime

<PageTitle>Contact - Developer Portfolio</PageTitle>

<div class="container mx-auto px-4 py-8 max-w-3xl">
    <h1 class="text-4xl font-bold mb-8">Contact Me</h1>
    
    <div class="bg-white shadow-lg rounded-lg p-8">
        <p class="mb-6">
            I'm always open to discussing new projects, opportunities or partnerships. 
            Feel free to reach out using the form below!
        </p>
        
        <EditForm Model="@contactForm" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            
            <div class="mb-4">
                <label for="name" class="block text-gray-700 font-bold mb-2">Name</label>
                <InputText id="name" @bind-Value="contactForm.Name" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600" />
                <ValidationMessage For="@(() => contactForm.Name)" class="text-red-600 text-sm" />
            </div>
            
            <div class="mb-4">
                <label for="email" class="block text-gray-700 font-bold mb-2">Email</label>
                <InputText id="email" @bind-Value="contactForm.Email" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600" />
                <ValidationMessage For="@(() => contactForm.Email)" class="text-red-600 text-sm" />
            </div>
            
            <div class="mb-4">
                <label for="subject" class="block text-gray-700 font-bold mb-2">Subject</label>
                <InputText id="subject" @bind-Value="contactForm.Subject" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600" />
                <ValidationMessage For="@(() => contactForm.Subject)" class="text-red-600 text-sm" />
            </div>
            
            <div class="mb-6">
                <label for="message" class="block text-gray-700 font-bold mb-2">Message</label>
                <InputTextArea id="message" @bind-Value="contactForm.Message" rows="5"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600" />
                <ValidationMessage For="@(() => contactForm.Message)" class="text-red-600 text-sm" />
            </div>
            
            <button type="submit" class="w-full bg-blue-600 hover:bg-blue-500 text-white font-bold py-3 px-4 rounded">
                Send Message
            </button>
        </EditForm>
        
        @if (isSubmitted)
        {
            <div class="mt-4 p-4 bg-green-100 text-green-700 rounded-md">
                Thank you for your message! I'll get back to you as soon as possible.
            </div>
        }
    </div>
    
    <div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
        <div class="bg-white shadow-lg rounded-lg p-6 text-center">
            <div class="text-blue-600 text-3xl mb-3">‚úâ</div>
            <h3 class="font-bold mb-2">Email</h3>
            <p>contact@example.com</p>
        </div>
        
        <div class="bg-white shadow-lg rounded-lg p-6 text-center">
            <div class="text-blue-600 text-3xl mb-3">üåê</div>
            <h3 class="font-bold mb-2">Social</h3>
            <p>@GitHubUsername on GitHub</p>
        </div>
        
        <div class="bg-white shadow-lg rounded-lg p-6 text-center">
            <div class="text-blue-600 text-3xl mb-3">üìç</div>
            <h3 class="font-bold mb-2">Location</h3>
            <p>Seattle, WA</p>
        </div>
    </div>
</div>

@code {
    private ContactForm contactForm = new();
    private bool isSubmitted = false;
    private string GitHubUsername = "yourusername";
    
    private async Task HandleValidSubmit()
    {
        // Here you would normally send this data to a backend service
        // For now, we'll just simulate a successful submission
        await Task.Delay(1000); // Simulate network request
        
        isSubmitted = true;
        contactForm = new ContactForm();
        
        // Scroll to top to show the success message
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
    }
    
    public class ContactForm
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Subject is required")]
        public string Subject { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Message is required")]
        [MinLength(10, ErrorMessage = "Message must be at least 10 characters")]
        public string Message { get; set; } = string.Empty;
    }
}